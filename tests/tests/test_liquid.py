from unittest import TestCase
from embit.util import secp256k1
from binascii import hexlify, unhexlify
from embit.liquid.pset import PSET

class LiquidTest(TestCase):

    def test_value_commitment(self):
        # scalars in little endian
        vbf = bytes(reversed(unhexlify("8deb8cd6e79d8745a4cd13beb9222959f95f6c6b42b8ec524342b9c2879782e7")))
        # asset generator, blinded
        asset = bytes(reversed(unhexlify("6f0279e9ed041c3d710a9f57d0c02928416460c4b722ae3457a11eec381c526d")))
        abf = bytes(reversed(unhexlify("15804b1a8aacaa52163a5e3a42182cb3a26cafbfe4e1d91c06c4adab4472695f")))
        # sec-serialized point
        expected = unhexlify("0b1c079dafd9725ddfd63eed4ad70e71113fa5158aa59ed5154c64627d42f1b342")

        gen = secp256k1.generator_generate_blinded(asset, abf)
        sec = secp256k1.generator_serialize(gen)
        self.assertEqual(sec, expected)

        # real value in satoshi
        value = round(2**62)
        # commitment
        commit = secp256k1.pedersen_commit(vbf, value, gen)
        sec = secp256k1.pedersen_commitment_serialize(commit)
        # commitments, sec-serialized
        # value_commitment = unhexlify("09d74784ca1f86fdb07726a9574f054946e4d8c547bfc42ee56b930f8f50af9da1")
        value_commitment = unhexlify("09e61ce0a80989c0223890645d29641a774dd9a57108b6e726d1f24cefbca1d9e1")
        self.assertEqual(sec, value_commitment)

        # nonce_commitment = bytes.fromhex("03b6627cedfa95a7b9200a3fb1041011e05a86968d873f74540d0cf5491c838df3")
        # some crazy proof
        # surjection_proof = bytes.fromhex("01000119b734c68b72ccb75288c919ecb976671dd7d17385d968f96215ca5161bd99eb913740ff7dd29a196b580068e058898c1ec7ecabfe147198fb988551a21580cd")

    def test_pset(self):
        psets = [
            "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",
        ]
        for b64 in psets:
            tx = PSET.from_string(b64)
            self.assertTrue(str(tx), b64)